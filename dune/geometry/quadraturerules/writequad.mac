load(to_poly_solve)$

epsilon: 1e-110$

write_quad(file, name, scriptname, polynome_fnkt, weight_fnkt, maxp) :=
block([i,N,n_,points,p,w,fd],
fd: openw(file),
printf(fd, "// -*- tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 2 -*-
// vi: set et ts=4 sw=2 sts=2:
//
// WARNING
// This file is automatically generated by ~a! Don't edit by hand!
#ifndef DUNE_GEOMETRY_QUADRATURE_~a_HH
#define DUNE_GEOMETRY_QUADRATURE_~a_HH

#ifndef DUNE_INCLUDING_IMPLEMENTATION
#error This is a private header that should not be included directly.
#error Use #include <dune/geometry/quadraturerules.hh> instead.
#endif

namespace Dune {

  /************************************************
   * Quadraturerule for 1d line
   *************************************************/

  template<typename ct>
  class ~aQuadratureRule : public QuadratureRule<ct,1>
  {
  public:
    /** \brief The highest quadrature order available */
    enum { highest_order = ~d };

  private:
    friend class QuadratureRuleFactory<ct,1>;
    ~aQuadratureRule (int p);
  };

  template<typename ct>
  ~aQuadratureRule<ct>::~aQuadratureRule (int p)
    : QuadratureRule<ct,1>(GeometryTypes::line)
  {
    switch (p)
    {
", scriptname, name, name, name, maxp, name, name, name),
for i: 1 thru maxp/2+1 do block([],
  printf(fd,"    // order ~d,~d
    case ~d:
    case ~d:
", 2*i-2,2*i-1, 2*i-2,2*i-1),
  points: makelist(rhs(p), p, bfallroots(polynome_fnkt(i))),
  weights: makelist(bfloat(weight_fnkt(i, p)), p, points),
  N: length(points),
  S: sort(makelist(n, n, 1, N), lambda([x,y], weights[x] < weights[y])),
  printf(fd,"      this->order_ = ~d;
",2*i-1),
  printf(fd,"      this->resize(~d);
",N),
  for n_: 1 thru N do block([n],
    n: S[n_],
    p: (points[n]+1)/2,
    p: max(p-epsilon,-epsilon)+epsilon,
    w: weights[n]/2,
    printf(fd,"      (*this)[~d] = {
        {~h},
",n_-1,p),
    printf(fd,"         ~h};
",w)
  ),
  printf(fd,"      break;

")
),

printf(fd,"    default:
      DUNE_THROW(QuadratureOrderOutOfRange, \"Quadrature rule \" << p << \" not supported!\");
    }
  }

} // namespace Dune

#endif // DUNE_GEOMETRY_QUADRATURE_~a_HH
", name),
close(fd)
)$
